String is the non primitive data type
string is a class and it contains some methods
//string literal
String s="TestLeaf"; stored ina string pool
// string object
String s2=new String(Testleaf); stored in a heap

s.isEquals(s2); will compare the value of the string
s==s2 will compare the memory

s.isequalsignorecase(s2)

Advanced xPaths:
1. Parent to child:

basic xPath for parent/childTagName[@attributeName='attributeValue']

ex: 
//p[@class='top']/input
//p[@class='top']/input[@name='USERNAME']
(//p[@class='top']/input)[1]


//p[@class='top']/input[@name='USERNAME']

2.Child to Parent:

basic xPath for child/parent::parentTagName

ex: 
//input[@id='username']/parent::p
//label[text()='Username']/parent::p

3. Grandparent to grandChild:

basic xPath for grandParent//grandChildTagName

ex:
//form[@id='login']//input
//form[@id='login']//input[@id='username']
(//form[@id='login']//input)[2]

4. grandChild to grandParent:

basic xPath for grandChild/ancestor::grandParentTagName

ex:
//label[text()='Username']/ancestor::form

5. Elder Sibling to Younger Sibling:

basic xPath for elderSibling/following-sibling::youngerSiblingTagName

ex:
//label[text()='Username']/following-sibling::input

6. Younger Sibling to Elder Sibling:

basic xPath for youngerSibling/preceding-sibling::elderSiblingTagName

ex:
//input[@id='username']/preceding-sibling::label

7. Elder Cousin to Younger Cousin:

basic xPath for elderCousin/following::youngerCousinTagName

ex:
//label[text()='Username']/following::label

8. Younger Cousin to Elder Cousin

basic xPath of youngerCousin/preceding::elderCousinTagName

ex:
//input[@id='password']/preceding::label
//input[@id='password']/preceding::label[text()='Username']